# Default Job configuration file for render job

# WARNING:
# Take care that indentation needs to be made by tabulator character, because indentation by spaces will result in multiline arguments!
# Section and option names may contain the following characters [_a-zA-Z-], e.g ${Sec1-Sub1:Opt_1-32}

# Environment variables are prepended with 'ENV::'
# All key with value "will_be_generated" mark values which do not need to be defined yet because they will get generated automatically 
# Actually the value of these variables can be anything they just need to be defined

# The submit.py script defines on more additional variable:
#   General:modulePathJobGen   : This is the path to the jobGenerators module (where all standart templates can be found, for certain generators) 
#   General:currentWorkDir     : The directory where the submit.py has been executed (mainly submit.py is executed in the Job folder)

# All these options in section (Job and Template) are strictly needed by GeneratorMPIJob which inherits from Generator
# GeneratorMPI provides these additional parameters which can be referenced in all sections:
#   Job:jobIdx :   The index of the currently generated job
#   Job:submitCommand

[Job]

globalDir            = ENV::MYGLOBALSCRATCH_DIR/${Job:jobName}
localDir             = ENV::MYLOCALSCRATCH_DIR/${Job:jobName}

jobName              = ${Cluster:jobName}.${Job:jobIdx}
scriptDirName        = Launch_${Job:jobName}
scriptDir            = ${Cluster:jobGeneratorOutputDir}/${Job:scriptDirName}

copyLocation         = 

submitArgs           = -W ${Cluster:runTime} -J "${Job:jobName}" -n ${Cluster:nProcesses} -R rusage[scratch=${Cluster:localScratchPerCore},mem=${Cluster:ramPerCore}] -oo "${Job:scriptDir}/lsf${Cluster:jobName}" < ${Job:scriptDir}/launch.sh 
submitCommand        =  will_be_generated

executableCommand    =  will_be_generated

processIdxVariabel   = $${OMPI_COMM_WORLD_RANK}
processDir           = ${Job:localDir}/Process_${Job:processIdxVariabel}

statusFolder         = ${General:currentWorkDir}/ENV::USER/global/${Cluster:jobName}

# Check files/executables
pathChecker             = [ ${Pipeline:simFiles15} , "${Pipeline:converterLogic}"]
executableChecker       = [ ["['Pipeline']['executableConverter']" , "${Pipeline:executableConverter}"] ]
# =====================================================

# All these files listed under this section are first replaced with the variables defined here and by the generator
# and the output is written to the jobs script directory folder by default.
# To each template defined here two additional options are generated if they do not yet exist!
# TempaltesOut:myTemplate  : The output path of the template ${Templates:myTemplate}
# The default path is the the job script directory ${Job:scriptDir}/basename(${Templates:myTemplate})

[Templates]

pipelineSpecs           = ${General:currentWorkDir}/templates/PipelineSpecs.json


launch                  = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/templates/launch.sh 
startJob                = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/start.sh
preProcessPerNode       = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/templates/preProcess.sh
processPerCore          = ${General:currentWorkDir}/templates/process.sh
postProcessPerNode      = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/templates/postProcess.sh
endJob                  = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/end.sh

submitJob               = ${General:configuratorModuleDir}/jobGenerators/templates/submit.sh

[TemplatesOut]


# All these options in section (RigidBodySim) are strictly needed by GeneratorMPIJobRigidBody which inherits from GeneratorMPIJob
# GeneratorRigidBodyRender provides these automatic generated additional parameters which can be referenced in all sections:
# 	None
# Principally, every stuff here can be moved into PipelineSpecs.json ....


[Pipeline-PreProcess]

fileMoverProcessFile     = ${Job:scriptDir}/FileMoverSequence-Rank-{0:04d}.json
fileMoverAdditionalTasks = [ ]
fileMoverLinkAllTools    = true 

# if we generate multiple jobs this path indicated where the status file is found (for first job this string is empty)
# set from the file validation output of last's job post-process
validationInfoFile    = will_be_generated



[Pipeline]

# Standart pipeline values ============================
pipelineSpecs           = ${Job:scriptDir}/PipelineSpecs.json

cleanUpCommand  = 

# Input Remover
inputRemoverCommand     =  find ${Job:processDir} -type d -name *input* | xargs rm -r

# Frame Generation =====================================
frameGenerator          = { "modulePath":"${General:currentWorkDir}/scripts/frameGenerator.py" , "moduleName":"frameGenerator",  "className":"FrameGenerator" }
# ======================================================

# Converter =========================================================================
executableConverter     = ENV::GRSF_SIMCONV
asanMangler             = ENV::ASANMANGLER

# local dirs
converterDir            = converter
converterExecutionDir   = ${Pipeline:converterDir}
converterInputDir       = ${Pipeline:converterExecutionDir}/input
converterOutputDir      = ${Pipeline:converterExecutionDir}/output

converterLogic          = ${General:currentWorkDir}/analyzerLogic/FindStart.xml

sceneFile               = ${General:currentWorkDir}/data/SceneFile.xml
mediaDir                = ENV::ROOT_REPO_DIR/SourceCode/Projects/SimulationFramework/Projects/media


simFiles15           = [ "${General:currentWorkDir}/data/SimState-P-15-0.sim" , "${General:currentWorkDir}/data/SimState-P-15-1.sim" ,"${General:currentWorkDir}/data/SimState-P-15-2.sim", "${General:currentWorkDir}/data/SimState-P-15-3.sim", "${General:currentWorkDir}/data/SimState-P-15-4.sim", "${General:currentWorkDir}/data/SimState-P-15-5.sim", "${General:currentWorkDir}/data/SimState-P-15-6.sim", "${General:currentWorkDir}/data/SimState-P-15-7.sim", "${General:currentWorkDir}/data/SimState-P-15-8.sim"] 

frame15               = { "outputFile" : "output/SimState-P-15-FindStart", "studyNr" : 15 , "simFiles" : ${Pipeline:simFiles15} }


# each dict is one frame (which get distributed over all processes)
frameList               = [ ${Pipeline:frame15} ]


# Format string: 0: argument is stateIdx, 1: time, 2: frameIdx
converterProcessFileWriter = { "modulePath":"${General:currentWorkDir}/scripts/processFileWriter.py" , "moduleName":"processFileWriter",  "className":"ConverterProcessFileWriter" }
converterProcessFile    = ${Job:scriptDir}/ConverterSequence-Rank-{0:04d}.xml




[Pipeline-PostProcess]

# Post-process: assemble file validation
validationSearchDir       = ${Job:globalDir}
validationInfoFile        = ${Job:scriptDir}/FileInfo.json
statusFolder              = ${General:currentWorkDir}/ENV::USER/global/${Cluster:jobName}
