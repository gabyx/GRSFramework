# Default Job configuration file for render job

# WARNING:
# Take care that indentation needs to be made by tabulator character, because indentation by spaces will result in multiline arguments!
# Section and option names may contain the following characters [_a-zA-Z-], e.g ${Sec1-Sub1:Opt_1-32}

# Environment variables are prepended with 'ENV::'
# All key with value "will_be_generated" mark values which do not need to be defined yet because they will get generated automatically 
# Actually the value of these variables can be anything they just need to be defined

# The submit.py script defines on more additional variable:
#   General:modulePathJobGen   : This is the path to the jobGenerators module (where all standart templates can be found, for certain generators) 
#   General:currentWorkDir     : The directory where the submit.py has been executed (mainly submit.py is executed in the Job folder)

# All these options in section (Job and Template) are strictly needed by GeneratorMPIJob which inherits from Generator
# GeneratorMPI provides these additional parameters which can be referenced in all sections:
#   Job:jobIdx :   The index of the currently generated job
#   Job:submitCommand

[Job]

globalDir            = ENV::MYGLOBALSCRATCH_DIR/${Cluster:jobName}${Job:jobTitle}/${Job:jobName}
localDir             = ENV::MYLOCALSCRATCH_DIR/${Job:jobName}


jobTitle             = -P-9Side
jobName              = ${Cluster:jobName}${Job:jobTitle}.${Job:jobIdx}

scriptDirName        = Launch_${Job:jobName}
scriptDir            = ${Cluster:jobGeneratorOutputDir}/${Job:scriptDirName}

copyLocation         = 

# signal end 15min before
signalXMinBeforRunTimeLimit = -wt '25' -wa USR2       

submitArgs           = ${Job:signalXMinBeforRunTimeLimit} -W ${Cluster:runTime} -J "${Job:jobName}" -n ${Cluster:nProcesses} -R rusage[scratch=${Cluster:localScratchPerCore},mem=${Cluster:ramPerCore}] -oo "${Job:scriptDir}/lsf${Cluster:jobName}" < ${Job:scriptDir}/launch.sh 

submitCommand        =  will_be_generated

executableCommand    =  will_be_generated

processIdxVariabel   = $${OMPI_COMM_WORLD_RANK}
processFolderName    = Process_${Job:processIdxVariabel}
processDir           = ${Job:localDir}/${Job:processFolderName}


# Check files/executables
pathChecker             = [ ${Pipeline:simFiles} , "${Pipeline:mediaDir}" , "${Pipeline:converterLogic}" , "${Pipeline:sceneFile}" ]
executableChecker       = [ ["['Pipeline']['executableConverter']" , "${Pipeline:executableConverter}"],  ["['Pipeline']['executableRenderer']" , "${Pipeline:executableRenderer}"] ]
# =====================================================


# All these files listed under this section are first replaced with the variables defined here and by the generator
# and the output is written to the jobs script directory folder by default.
# To each template defined here two additional options are generated if they do not yet exist!
# TempaltesOut:myTemplate  : The output path of the template ${Templates:myTemplate}
# The default path is the the job script directory ${Job:scriptDir}/basename(${Templates:myTemplate})

[Templates]

searchPathRib           = ${General:jobDir}/scene/archives/SearchPath.rib
pipelineSpecs           = ${General:jobDir}/scripts/PipelineSpecs.json


launch                  = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/templates/launch.sh 
startJob                = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/start.sh
preProcessPerNode       = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/templates/preProcess.sh
processPerCore          = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/renderPipeline/process.sh
postProcessPerNode      = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/templates/postProcess.sh
endJob                  = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/end.sh

endPerProcess           = ${General:configuratorModuleDir}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/endPerProcess.sh


submitJob               = ${General:configuratorModuleDir}/jobGenerators/templates/submit.sh

[TemplatesOut]
searchPathRib           = ${Job:scriptDir}/SearchPath.rib

# All these options in section (RigidBodySim) are strictly needed by GeneratorMPIJobRigidBody which inherits from GeneratorMPIJob
# GeneratorRigidBodyRender provides these automatic generated additional parameters which can be referenced in all sections:
# 	None
# Principally, every stuff here can be moved into PipelineSpecs.json ....


[Pipeline-PreProcess]

fileMoverProcessFile     = ${Job:scriptDir}/FileMoverSequence-Rank-{0:04d}.json
fileMoverAdditionalTasks = [ ${Pipeline:rendererMakeDirs} , ${Pipeline:moveSearchPathRib} ]
fileMoverLinkAllTools    = true 

# if we generate multiple jobs this path indicated where the status file is found (for first job this string is empty)
# set from the file validation output of last's job post-process
validationInfoFile    = will_be_generated





[Pipeline]

# Standart pipeline values ============================
pipelineSpecs           = ${Job:scriptDir}/PipelineSpecs.json



# Input Remover
cleanUpCommand     =  find ${Job:processDir} -type d -iname "*input*" -prune -exec rm -r {} \;

# File validation per Process
validationInfoFile        = ${Job:processDir}/FileInfo.json

# Frame Generation =====================================
# startIdx,endIdx,increment is a range of states, this range is mapped over all ${Pipeline:simFiles} continuously
# all states to extract from the simFiles are ordered with respect to time and a frameIdx is assigned starting from enumerateFramesStart
startIdx                = 0
endIdx                  = -1
increment               = 1
enumerateFramesStart    = ${Pipeline:startIdx}
skipFirstState          = true
frameGenerator          = HPCJobConfigurator.jobGenerators.jobGeneratorMPI.generatorToolPipeline.scripts.renderPipeline.FrameGenerator
# ======================================================


# Render ============================================================================
# checkPointInterval is in minutes, threads = ENV::PRMAN_NTHREADS
checkPointInterval      = 10m
executableRenderer      = prman -t:ENV::PRMAN_NTHREADS -progress -checkpoint ${Pipeline:checkPointInterval} -recover 1

# local dirs 
renderDir               = renderer
renderExecutionDir      = ${Pipeline:renderDir}
renderInputDir          = ${Pipeline:renderExecutionDir}/input
renderOutputDir         = ${Pipeline:renderExecutionDir}/output
rendererMakeDirs        = { "type" : "makeDirs" , "dir": "${Pipeline:renderInputDir}/archives" }  


scenePath               = ${General:jobDir}/scene/blender/usableRIBSequence/scene-side
# Search Paths for Renderman ==
globalArchiveSearchPath = ${General:jobDir}/scene/archives:${General:jobDir}/scene/blender/materials:${Pipeline:scenePath}/archives:${Pipeline:scenePath}/archives/worlds:${Pipeline:scenePath}/archives/lights:${Pipeline:scenePath}/archives/objects:${Pipeline:scenePath}/archives/objects/geometry:${Pipeline:scenePath}/archives/objects/materials
localArchiveSearchPath  = input/archives:input/converter
archiveSearchPath       = ${Pipeline:globalArchiveSearchPath}:${Pipeline:localArchiveSearchPath}:@

textureSearchPath       = ${General:jobDir}/scene/blender/textures:@
shaderSearchPath        = @

searchPathRib           = ${Job:scriptDir}/SearchPath.rib
moveSearchPathRib       = { "type": "copy", "from" : "${Pipeline:searchPathRib}", "to": "${Pipeline:renderExecutionDir}" }
# ==============================

renderInputFile         = ${Pipeline:scenePath}/archives/Frame-$${tools[renderer][frameIdx]:04d}$$.rib
renderOutputFileProp    = { "file" : "output/Frame-$${tools[renderer][frameIdx]:04d}$$.exr" , "hashString" : "renderer/output/Frame-$${tools[renderer][frameIdx]:04d}$$.exr" }

renderProcessFileWriter = HPCJobConfigurator.jobGenerators.jobGeneratorMPI.generatorToolPipeline.scripts.renderPipeline.RenderProcessFileWriter
renderProcessFile       = ${Job:scriptDir}/RenderSequence-Rank-{0:04d}.json 

renderInfoFileWriter    = HPCJobConfigurator.jobGenerators.jobGeneratorMPI.generatorToolPipeline.scripts.renderPipeline.RenderInfoFileWriter
renderInfoFile          = ${Job:scriptDir}/RenderInfo.json

# Converter =========================================================================
executableConverter     = ENV::GRSF_SIMCONV
asanMangler             = ENV::ASANMANGLER

# local dirs
converterDir            = converter
converterExecutionDir   = ${Pipeline:converterDir}
converterInputDir       = ${Pipeline:converterExecutionDir}/input
converterOutputDir      = ${Pipeline:converterExecutionDir}/output

converterLogic          = ${General:jobDir}/renderLogic/RenderLogic-Velocity.xml

sceneFile               = ${General:jobDir}/data/SceneFile.xml
mediaDir                = ENV::GRSF_MEDIA_DIR/SourceCode/Projects/SimulationFramework/Projects/media
simFiles                = [ "${General:jobDir}/data/SimState-P-9-0.sim" ]


# Format string: 0: argument is stateIdx, 1: time, 2: frameIdx
# respect to execution dir
converterOutputFileProp     = { "file": "output/GranularMaterial-f-$${tools[renderer][frameIdx]:d}$$.rib" , "hashString" : "converter/output/GranularMaterial-f-$${tools[renderer][frameIdx]:d}$$.rib" }

converterProcessFileWriter = HPCJobConfigurator.jobGenerators.jobGeneratorMPI.generatorToolPipeline.scripts.renderPipeline.ConverterProcessFileWriter
converterProcessFile    = ${Job:scriptDir}/ConverterSequence-Rank-{0:04d}.xml




[Pipeline-PostProcess]

# for parallel validation in end.sh ====================================
validationSearchDirProcess = ${Job:globalDir}/${Job:processFolderName}
validationInfoFileProcess    = ${Job:globalDir}/${Job:processFolderName}/FileInfo.json
# validation output file
validationInfoFile        = ${Job:globalDir}/FileInfo.json
validationInfoFilesCombineGlob = ${Job:globalDir}/**/Process**/FileInfo.json
# ======================================================================

# assemble file validation (manual)
validationSearchDirAll       = ${Job:globalDir}


statusFolder              = ENV::MYGLOBALSCRATCH_DIR/${Cluster:jobName}${Job:jobTitle}
