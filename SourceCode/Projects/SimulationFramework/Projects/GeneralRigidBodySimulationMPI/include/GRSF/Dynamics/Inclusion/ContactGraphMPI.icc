
#include "GRSF/Dynamics/Inclusion/ContactGraphMPI.hpp"


#include "GRSF/Dynamics/Inclusion/ContactFeasibilityTable.hpp"

template<typename TCombo>
ContactGraph<TCombo>::ContactGraph(std::shared_ptr<DynamicsSystemType> pDynSys):
    m_pDynSys(pDynSys),
    m_pContactParameterMap(&pDynSys->m_ContactParameterMap)
{}
template<typename TCombo>
void ContactGraph<TCombo>::setInclusionCommunicator(InclusionCommunicatorType * pInclusionComm) {
    m_pInclusionComm = pInclusionComm;
    m_pNbDataMap = m_pInclusionComm->getNeighbourMap();
}
template<typename TCombo>
ContactGraph<TCombo>::~ContactGraph() {
    clearGraph();
}
template<typename TCombo>
void ContactGraph<TCombo>::setLog(Logging::Log * solverLog) {
    m_pSolverLog = solverLog;
}
template<typename TCombo>
void ContactGraph<TCombo>::clearGraph() {

    m_edgeCounter = 0;
    m_nodeCounter = 0;
    m_nodeCounterLocal = 0;
    m_nodeCounterRemote = 0;
    m_nodeCounterSplitBody = 0;

    m_localBodiesWithContacts.clear();
    m_remoteBodiesWithContacts.clear();

    m_simBodiesToContactsMap.clear();

    m_splittedNodes.clear();

    m_usedContactModels = 0;
    m_maxResidual = 0;



    GeneralGraph::clear();

}
template<typename TCombo>
template<bool addEdges>
void ContactGraph<TCombo>::addNode(CollisionData * pCollData) {


    static NodeInit nodeInit(this);

    ASSERTMSG(pCollData->m_pBody[0] != nullptr && pCollData->m_pBody[1] != nullptr, " Bodys are null pointers?");
    //cout << "add node : "<<m_nodeCounter<< " body id:" << RigidBodyId::getBodyIdString(pCollData->m_pBody[0]) <<" and "<< RigidBodyId::getBodyIdString(pCollData->m_pBody[1]) <<endl;

    //  add a contact node to the graph
    // check to which nodes we need to connect?
    // all nodes (contacts) which are in the BodyContactList (maps bodies -> contacts)

    // Check that contact is Local-Local or Remote-Local or Local-Remote
    // So Fail if Remote-Remote
    std::pair<bool,bool> isRemote;
    bool feasible = ContactFeasibilityTableMPI::checkFeasibilityOfContact(pCollData->m_pBody[0], pCollData->m_pBody[1] , isRemote );
    LOGASSERTMSG(feasible, m_pSolverLog, "Contact not feasible between body:  id1: "
                 <<RigidBodyId::getBodyIdString(pCollData->m_pBody[0]->m_id) << " and id2: " <<RigidBodyId::getBodyIdString(pCollData->m_pBody[1]->m_id) )


    // get contact parameters
    auto & contactParams = m_pContactParameterMap->getContactParams(pCollData->m_pBody[0]->m_eMaterial,
                           pCollData->m_pBody[1]->m_eMaterial);

    // Set flag for the corresponding model
    m_usedContactModels |= 1 << EnumConversion::toIntegral(contactParams.m_contactModel);

    // depending on type allocate corresponding node type
    if( contactParams.m_contactModel == ContactModels::Enum::UCF  ||
        contactParams.m_contactModel == ContactModels::Enum::UCFD ||
        contactParams.m_contactModel == ContactModels::Enum::UCFDD) {

        // add the pNodeData to the node list
        auto * addedNode = this->emplaceNodeBack<UCFNodeDataType>(m_nodeCounter);
        nodeInit.template apply<addEdges>(addedNode, pCollData, contactParams,isRemote);

    } else {
        ASSERTMSG(false," You specified a contact model which has not been implemented so far!");
    }

    m_nodeCounter++;
}

template<typename TCombo>
std::pair<typename ContactGraph<TCombo>::SplitBodyNodeDataType *, bool>
ContactGraph<TCombo>::addSplitBodyNode(RigidBodyType * body, const RankIdType & rank) {


    auto pairRes = m_splittedNodes.emplace(body->m_id, (SplitBodyNodeDataType *)nullptr );
    SplitBodyNodeDataType * & pRef = pairRes.first->second;

    if(pairRes.second) {
        //if inserted set the new pointer
        // add a split node and
        // this returned pointer stays valid, the graph does not reallocate nodes somewhere else!!
        // this a criteria of the contact graph
        auto * sbN = this->emplaceNodeBack<SplitBodyNodeDataType>(m_nodeCounterSplitBody);
        // set the new pointer
        pRef = &(sbN->getData());
        // init split node
        pRef->initialize(body);
        ++m_nodeCounterSplitBody;
    }

    LOGASSERTMSG(pRef,m_pSolverLog, "SplitBodyNode pointer of body "
                 << RigidBodyId::getBodyIdString(body->m_id) << " is zero!")
    //add this rank
    bool added = pRef->addRank(rank);
    LOGASSERTMSG(added,m_pSolverLog, "Rank could not been added to SplitBodyNode with id: "
                 << RigidBodyId::getBodyIdString(body->m_id))

    return std::make_pair(pairRes.first->second, pairRes.second);
}


