# Default Job configuration file for correlator job

# WARNING:
# Take care that indentation needs to be made by tabulator character, because indentation by spaces will result in multiline arguments!
# Section and option names may contain the following characters [_a-zA-Z-], e.g ${Sec1-Sub1:Opt_1-32}

# Environment variables are prepended with 'ENV::'
# All key with value "will_be_generated" mark values which do not need to be defined yet because they will get generated automatically 
# Actually the value of these variables can be anything they just need to be defined

# The submit.py script defines on more additional variable:
#   General:modulePathJobGen   : This is the path to the jobGenerators module (where all standart templates can be found, for certain generators) 
#   General:currentWorkDir     : The directory where the submit.py has been executed (mainly submit.py is executed in the Job folder)

# All these options in section (Job and Template) are strictly needed by GeneratorMPIJob which inherits from Generator
# GeneratorMPI provides these additional parameters which can be referenced in all sections:
#   Job:jobIdx :   The index of the currently generated job
#   Job:submitCommand

[Job]

globalDir            = ENV::MYGLOBALSCRATCH_DIR/${Job:jobName}
localDir             = ENV::MYLOCALSCRATCH_DIR/${Job:jobName}

jobName              = ${Cluster:jobName}-Exp4-5Frames.${Job:jobIdx}
scriptDirName        = Launch_${Job:jobName}
scriptDir            = ${Cluster:jobGeneratorOutputDir}/${Job:scriptDirName}

copyLocation         = 

tarCommandToGlobalDir = tar -cf

submitArgs           = -W ${Cluster:runTime} -J "${Job:jobName}" -n ${Cluster:nProcesses} -R rusage[scratch=${Cluster:localScratchPerCore},mem=${Cluster:ramPerCore}] -oo "${Job:scriptDir}/lsf${Cluster:jobName}" < ${Job:scriptDir}/launch.sh 
submitCommand        =  will_be_generated

executableCommand    =  will_be_generated

processIdxVariabel   = $${OMPI_COMM_WORLD_RANK}
processDir           = ${Job:localDir}/Process_${Job:processIdxVariabel}


# Check files/executables
pathChecker             = [ "${Pipeline:correlatorAccivModulePath}" , "${Pipeline:converterBackgroundFile}", "${Pipeline:converterExperimentSettingsFile}"  ]
executableChecker       = [ ["['Pipeline']['correlatorExecutable']" , "${Pipeline:correlatorExecutable}"], ["['Pipeline']['correlatorPreExecutable']" , "${Pipeline:correlatorPreExecutable}"] ]

# =====================================================

# All these files listed under this section are first replaced with the variables defined here and by the generator
# and the output is written to the jobs script directory folder by default.
# To each template defined here two additional options are generated if they do not yet exist!
# TempaltesOut:myTemplate  : The output path of the template ${Templates:myTemplate}
# The default path is the the job script directory ${Job:scriptDir}/basename(${Templates:myTemplate})

[Templates]

pipelineSpecs           = ${General:currentWorkDir}/scripts/PipelineSpecs.json

correlatorDefaultParameter = ${General:currentWorkDir}/scripts/accivDefaultParameters.ascii

# 5 Frames
correlatorParametersPass1 = ${General:currentWorkDir}/scripts/exp${Pipeline:converterExperimentNumber}/3Passes-5Frames/accivParametersPass1.ascii
correlatorParametersPass2 = ${General:currentWorkDir}/scripts/exp${Pipeline:converterExperimentNumber}/3Passes-5Frames/accivParametersPass2.ascii
correlatorParametersPass3 = ${General:currentWorkDir}/scripts/exp${Pipeline:converterExperimentNumber}/3Passes-5Frames/accivParametersPass3.ascii


launch                  = ${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/templates/launch.sh 
startJob                = ${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/start.sh
preProcessPerNode       = ${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/templates/preProcess.sh
processPerCore          = ${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/civPipeline/process.sh
postProcessPerNode      = ${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/templates/postProcess.sh
endJob                  = ${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/templates/end.sh

submitJob               = ${General:modulePathGenerators}/jobGenerators/templates/submit.sh

[TemplatesOut]


# All these options in section (RigidBodySim) are strictly needed by GeneratorMPIJobRigidBody which inherits from GeneratorMPIJob
# GeneratorRigidBodycorrelator provides these automatic generated additional parameters which can be referenced in all sections:
# 	None


[Pipeline-PreProcess]

fileMoverProcessFile     = ${Job:scriptDir}/FileMoverSequence-Rank-{0:04d}.json
fileMoverAdditionalTasks = [ ]
fileMoverLinkAllTools    = true 

# if we generate multiple jobs this path indicated where the status file is found (for first job this string is empty)
# set from the file validation output of last's job post-process
validationInfoFile    = will_be_generated




[Pipeline]

# Standart pipeline values ============================
pipelineSpecs           = ${Job:scriptDir}/PipelineSpecs.json


# Input Remover
cleanUpCommand  = find ${Job:processDir} \( -type d -and -name "input" \) -or \( -type f -path "*accivWorkFolder*" -and -not -name "combinedCorrelationTiePoints.h5" \) -or \( -type l -path "*correlator*" -and -iname "*.h5" \) -or \( -type f -name "outScatteredVelocity.h5" \) -or \( -type f -name "gridGeometryFactors.h5" \) -or \( -type f -path "*correlator*" -and -iname "*.ascii" \)| xargs rm -r

# Frame Generation =====================================
startIdx                = 170
endIdx                  = 1995
#startIdx                = 608
#endIdx                  = 609
increment               = 4
frameGenerator          = JobGenerator.jobGenerators.jobGeneratorMPI.generatorToolPipeline.scripts.civPipeline.FrameGenerator
# ======================================================

# correlator image increment used for matching several images per generated frame
correlatorImageIncrement = 1 
#${Pipeline:increment}

# Correlation Image Velociometry ============================================================================
correlatorExecutable        = acciv
correlatorPreExecutable     = acciv-makeGeometryFactors

# local dirs 
correlatorDir               = correlator
correlatorExecutionDir      = ${Pipeline:correlatorDir}
correlatorInputDir          = ${Pipeline:correlatorExecutionDir}/input
correlatorOutputDir         = ${Pipeline:correlatorExecutionDir}/output

correlatorAccivModulePath   = ${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/scripts/civPipeline/accivCorrelator.py
correlatorProcessClass      = { "modulePath" : "${Pipeline:correlatorAccivModulePath}" , "moduleName" : "accivCorrelator" , "className" : "AccivCorrelator" } 

correlatorInputFiles         = [ "image-f-$${EVAL:: formatDict['tools']['correlator']['frameIdx']}$$.h5" , "image-f-$${EVAL::  formatDict['tools']['correlator']['frameIdx'] + ${Pipeline:correlatorImageIncrement}*1 }$$.h5" , "image-f-$${EVAL::  formatDict['tools']['correlator']['frameIdx']+ ${Pipeline:correlatorImageIncrement}*2 }$$.h5" , "image-f-$${EVAL::  formatDict['tools']['correlator']['frameIdx']+ ${Pipeline:correlatorImageIncrement}*3 }$$.h5" , "image-f-$${EVAL::  formatDict['tools']['correlator']['frameIdx']+ ${Pipeline:correlatorImageIncrement}*4 }$$.h5" ]

correlatorOutputFiles        = [ "output/Frame-$${EVAL:: formatDict['tools']['correlator']['frameIdx']}$$/Pass${Pipeline:correlatorPasses}/outGridVelocity.h5" ]


correlatorPasses                  = 3
correlatorParameterFiles          = [ "${TemplatesOut:correlatorParametersPass1}" , "${TemplatesOut:correlatorParametersPass2}" , "${TemplatesOut:correlatorParametersPass2}"  ]
correlatorDefaultParameterFile    = ${TemplatesOut:correlatorDefaultParameter}
correlatorImageSearchPaths        = [ "./input", "./input/converter" ]

# ACCIV related (all paths relative to the pass folder)
correlatorAccivImageNameFormat            = image%04i.h5
correlatorAccivGeometryFactorsFile        = ../gridGeometryFactors.h5
correlatorAccivEarlierImageFileTemplate   = ../${Pipeline:correlatorAccivImageNameFormat}
correlatorAccivLaterImageFileTemplate     = ../${Pipeline:correlatorAccivImageNameFormat}
correlatorAccivCleanUpPassCommand         = find %s \\( -type f -path '*accivWorkFolder*' -and -not -name 'combinedCorrelationTiePoints.h5' \\) -or \\( -type f -name 'outScatteredVelocity.h5' \\) -or \\( -type f -and -iname '*.ascii' \\) | xargs rm -r

correlatorPlotClasses           = [ { "modulePath":"${General:currentWorkDir}/scripts/accivPlotting/plotVelocities.py" , "moduleName":"plotVelocities",  "className":"plot", "options": { "plotSettings" : {"x0": -0.05 , "y0" : 0.1 ,"showTitles" : false, "figureExt" : ".jpg"} } } ]

correlatorSettings                = { "executable" : "${Pipeline:correlatorExecutable}", "preExecutable" : "${Pipeline:correlatorPreExecutable}", "imageSearchPaths" : ${Pipeline:correlatorImageSearchPaths}, "imageNameFormat" : "${Pipeline:correlatorAccivImageNameFormat}" , "passes"     : ${Pipeline:correlatorPasses} , "defaultParameterFile"     : "${Pipeline:correlatorDefaultParameterFile}", "parameterFiles" : ${Pipeline:correlatorParameterFiles}, "accivImageNameFormat": "${Pipeline:correlatorAccivImageNameFormat}" ,"accivGeometryFactorsFile" : "${Pipeline:correlatorAccivGeometryFactorsFile}" , "passCleanUpCommand" : "${Pipeline:correlatorAccivCleanUpPassCommand}" }


correlatorProcessFileWriter = JobGenerator.jobGenerators.jobGeneratorMPI.generatorToolPipeline.scripts.civPipeline.CorrelatorProcessFileWriter
correlatorProcessFile       = ${Job:scriptDir}/CorrelatorSequence-Rank-{0:04d}.json 



# Converter =========================================================================

# local dirs
converterDir            = converter
converterExecutionDir   = ${Pipeline:converterDir}
converterInputDir       = ${Pipeline:converterExecutionDir}/input
converterOutputDir      = ${Pipeline:converterExecutionDir}/output

converterProcessClass         = { "modulePath" : "${General:modulePathGenerators}/jobGenerators/jobGeneratorMPI/generatorToolPipeline/scripts/civPipeline/accivImageProcessing.py" , "moduleName" : "accivImageProcessing" , "className" : "AccivImageConverter" } 

converterImageFolder = ${General:currentWorkDir}/data/ChuteExperimentsAdd/data/experiment${Pipeline:converterExperimentNumber}

converterInputFiles     = [ "${Pipeline:converterImageFolder}/exp${Pipeline:converterExperimentNumber}-$${EVAL::'%04i' % formatDict['tools']['correlator']['frameIdx']}$$.jpg" , "${Pipeline:converterImageFolder}/exp${Pipeline:converterExperimentNumber}-$${EVAL::'%04i' % (formatDict['tools']['correlator']['frameIdx'] + ${Pipeline:correlatorImageIncrement}*1)}$$.jpg"  , "${Pipeline:converterImageFolder}/exp${Pipeline:converterExperimentNumber}-$${EVAL::'%04i' % (formatDict['tools']['correlator']['frameIdx'] + ${Pipeline:correlatorImageIncrement}*2)}$$.jpg"  , "${Pipeline:converterImageFolder}/exp${Pipeline:converterExperimentNumber}-$${EVAL::'%04i' % (formatDict['tools']['correlator']['frameIdx'] + ${Pipeline:correlatorImageIncrement}*3)}$$.jpg" , "${Pipeline:converterImageFolder}/exp${Pipeline:converterExperimentNumber}-$${EVAL::'%04i' % (formatDict['tools']['correlator']['frameIdx'] + ${Pipeline:correlatorImageIncrement}*4)}$$.jpg" ]

converterInputFileIndices  = [ "$${EVAL:: formatDict['tools']['correlator']['frameIdx'] }$$" , "$${EVAL:: (formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*1) }$$" , "$${EVAL:: (formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*2) }$$" , "$${EVAL:: (formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*3) }$$" , "$${EVAL:: (formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*4) }$$" ]

converterOutputFiles   = [ "output/image-f-$${EVAL:: formatDict['tools']['correlator']['frameIdx']}$$.h5" , "output/image-f-$${EVAL:: formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*1 }$$.h5" , "output/image-f-$${EVAL:: formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*2 }$$.h5" , "output/image-f-$${EVAL:: formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*3 }$$.h5" , "output/image-f-$${EVAL:: formatDict['tools']['correlator']['frameIdx']+${Pipeline:correlatorImageIncrement}*4 }$$.h5" ]


converterExperimentNumber   = 4
converterExperimentSettingsFile = ${General:currentWorkDir}/data/ChuteExperiments/data/ExperimentSettings.json

converterOutputContour  = false
converterOutputMask     = false
converterOutputImgModSteps = false
converterOtsuThMult = 0.5

converterBackgroundFile = ${Pipeline:converterImageFolder}/exp${Pipeline:converterExperimentNumber}-0001.jpg
converterAdditionalMask = 

converterIntensityShift = ${General:currentWorkDir}/data/ChuteExperiments/data/experiment${Pipeline:converterExperimentNumber}/intensityShift.json

converterSettings = { "frameExtractRegex": "${Pipeline:converterFrameExtractFileRegex}", "intensityShift": "${Pipeline:converterIntensityShift}" , "backgroundFile" : "${Pipeline:converterBackgroundFile}", "experimentNumber" : ${Pipeline:converterExperimentNumber}, "experimentSettingsFile" : "${Pipeline:converterExperimentSettingsFile}", "outputImgModSteps" : ${Pipeline:converterOutputImgModSteps}, "outputContour" : ${Pipeline:converterOutputContour}, "outputMask"    : ${Pipeline:converterOutputMask} , "otsuThMult" : ${Pipeline:converterOtsuThMult} , "additionalMask" : "${Pipeline:converterAdditionalMask}" , "h5Compression" : "gzip" }

converterProcessFileWriter = JobGenerator.jobGenerators.jobGeneratorMPI.generatorToolPipeline.scripts.civPipeline.ConverterProcessFileWriter
converterProcessFile       = ${Job:scriptDir}/ConverterSequence-Rank-{0:04d}.json




[Pipeline-PostProcess]

# Post-process: assemble file validation
validationSearchDir       = ${Job:globalDir}
validationInfoFile        = ${Job:scriptDir}/FileInfo.json

statusFolder         = ${General:currentWorkDir}/ENV::USER/global/${Cluster:jobName}